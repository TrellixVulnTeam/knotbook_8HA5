trigger:
  - master
  - release/*
  - feature/*
  - ci/*

jobs:
  - job: Windows
    pool:
      vmImage: "windows-latest"
    steps:
      - task: CacheBeta@0
        condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')
        inputs:
          key: jdk | $(Agent.OS)
          path: "build/jdk_inst"
          cacheHitVar: JDK_CACHE_RESTORED
        displayName: "JDK Cache"
      - powershell: |
          mkdir build
          $ProgressPreference = "SilentlyContinue"
          wget "https://download.java.net/java/GA/jdk12.0.2/e482c34c86bd4bf8b56c0b35558996b9/10/GPL/openjdk-12.0.2_windows-x64_bin.zip" -O "build\jdk.zip"
        condition: ne(variables.JDK_CACHE_RESTORED, 'true')
        displayName: "Download JDK"
      - task: JavaToolInstaller@0
        condition: ne(variables.JDK_CACHE_RESTORED, 'true')
        inputs:
          versionSpec: "12"
          jdkSourceOption: localDirectory
          jdkFile: "build/jdk.zip"
          jdkDestinationDirectory: "build/jdk_inst"
          jdkArchitectureOption: x64
      #      - task: CacheBeta@0
      #        condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')
      #        inputs:
      #          key: gradle | $(Agent.OS)
      #          path: $(Pipeline.Workspace)/.gradle
      #        displayName: "Gradle Cache"
      - task: Gradle@2
        displayName: "Gradle Build"
        inputs:
          workingDirectory: ""
          gradleWrapperFile: "gradlew"
          javaHomeOption: "JDKVersion"
          jdkVersionOption: "1.12"
          jdkArchitectureOption: "x64"
          publishJUnitResults: true
          testResultsFiles: "**/TEST-*.xml"
          tasks: "build"
      - task: Gradle@2
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        displayName: "Generate Runtime Image"
        inputs:
          workingDirectory: ""
          gradleWrapperFile: "gradlew"
          javaHomeOption: "JDKVersion"
          jdkVersionOption: "1.12"
          jdkArchitectureOption: "x64"
          publishJUnitResults: false
          tasks: "jlink"
      - task: ArchiveFiles@2
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        inputs:
          rootFolderOrFile: "$(System.DefaultWorkingDirectory)/build/application/image"
          includeRootFolder: true
          archiveType: "7z"
          archiveFile: "$(System.DefaultWorkingDirectory)/app-image-$(Build.BuildNumber)"
      - task: PublishPipelineArtifact@1
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        inputs:
          path: "$(System.DefaultWorkingDirectory)/app-image-$(Build.BuildNumber)"
          artifact: "windows"
  - job: Linux
    pool:
      vmImage: "ubuntu-latest"
    steps:
      #      - task: CacheBeta@0
      #        condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')
      #        inputs:
      #          key: gradle | $(Agent.OS)
      #          path: $(Pipeline.Workspace)/.gradle
      #        displayName: "Gradle Cache"
      - task: Gradle@2
        displayName: "Gradle Build"
        inputs:
          workingDirectory: ""
          gradleWrapperFile: "gradlew"
          javaHomeOption: "JDKVersion"
          jdkVersionOption: "1.12"
          jdkArchitectureOption: "x64"
          publishJUnitResults: true
          testResultsFiles: "**/TEST-*.xml"
          tasks: "build"
      - task: Gradle@2
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        displayName: "Generate Runtime Image"
        inputs:
          workingDirectory: ""
          gradleWrapperFile: "gradlew"
          javaHomeOption: "JDKVersion"
          jdkVersionOption: "1.12"
          jdkArchitectureOption: "x64"
          publishJUnitResults: false
          tasks: "jlink"
      - task: ArchiveFiles@2
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        inputs:
          rootFolderOrFile: "$(System.DefaultWorkingDirectory)/build/application/image"
          includeRootFolder: true
          archiveType: "zip"
          archiveFile: "$(System.DefaultWorkingDirectory)/app-image-$(Build.BuildNumber).zip"
      - task: PublishPipelineArtifact@1
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        inputs:
          path: "$(System.DefaultWorkingDirectory)/app-image-$(Build.BuildNumber).zip"
          artifact: "ubuntu"
  - job: macOS
    pool:
      vmImage: "macOS-latest"
    steps:
      #      - task: CacheBeta@0
      #        condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')
      #        inputs:
      #          key: gradle | $(Agent.OS)
      #          path: $(Pipeline.Workspace)/.gradle
      #        displayName: "Gradle Cache"
      - task: Gradle@2
        displayName: "Gradle Build"
        inputs:
          workingDirectory: ""
          gradleWrapperFile: "gradlew"
          javaHomeOption: "JDKVersion"
          jdkVersionOption: "1.12"
          jdkArchitectureOption: "x64"
          publishJUnitResults: true
          testResultsFiles: "**/TEST-*.xml"
          tasks: "build"
      - task: Gradle@2
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        displayName: "Generate Runtime Image"
        inputs:
          workingDirectory: ""
          gradleWrapperFile: "gradlew"
          javaHomeOption: "JDKVersion"
          jdkVersionOption: "1.12"
          jdkArchitectureOption: "x64"
          publishJUnitResults: false
          tasks: "jlink"
      - task: ArchiveFiles@2
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        inputs:
          rootFolderOrFile: "$(System.DefaultWorkingDirectory)/build/application/image"
          includeRootFolder: true
          archiveType: "zip"
          archiveFile: "$(System.DefaultWorkingDirectory)/app-image-$(Build.BuildNumber).zip"
      - task: PublishPipelineArtifact@1
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        inputs:
          path: "$(System.DefaultWorkingDirectory)/app-image-$(Build.BuildNumber).zip"
          artifact: "mac"