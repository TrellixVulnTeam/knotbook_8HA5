trigger:
  - master
  - release/*
  - feature/*
  - ci/*

jobs:
  - job: Windows
    pool:
      vmImage: "windows-latest"
    steps:
      - task: Gradle@2
        displayName: "Gradle Assemble"
        inputs:
          workingDirectory: ""
          gradleWrapperFile: "gradlew"
          javaHomeOption: "JDKVersion"
          jdkVersionOption: "1.11"
          jdkArchitectureOption: "x64"
          publishJUnitResults: false
          testResultsFiles: "**/TEST-*.xml"
          tasks: "assemble"
      - task: Gradle@2
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        displayName: "Generate Runtime Image"
        inputs:
          workingDirectory: ""
          gradleWrapperFile: "gradlew"
          javaHomeOption: "JDKVersion"
          jdkVersionOption: "1.11"
          jdkArchitectureOption: "x64"
          publishJUnitResults: false
          tasks: "jlink"
      - task: ArchiveFiles@2
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        inputs:
          rootFolderOrFile: "$(System.DefaultWorkingDirectory)/build/kb.application/image"
          includeRootFolder: true
          archiveType: "tar"
          tarCompression: "xz"
          archiveFile: "$(System.DefaultWorkingDirectory)/windows-$(Build.BuildNumber).tar.xz"
      - task: PublishPipelineArtifact@1
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        inputs:
          path: "$(System.DefaultWorkingDirectory)/windows-$(Build.BuildNumber).tar.xz"
          artifact: "windows"
  - job: Linux
    pool:
      vmImage: "ubuntu-latest"
    steps:
      - task: Gradle@2
        displayName: "Gradle Assemble"
        inputs:
          workingDirectory: ""
          gradleWrapperFile: "gradlew"
          javaHomeOption: "JDKVersion"
          jdkVersionOption: "1.11"
          jdkArchitectureOption: "x64"
          publishJUnitResults: false
          testResultsFiles: "**/TEST-*.xml"
          tasks: "assemble"
      - task: Gradle@2
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        displayName: "Generate Runtime Image"
        inputs:
          workingDirectory: ""
          gradleWrapperFile: "gradlew"
          javaHomeOption: "JDKVersion"
          jdkVersionOption: "1.11"
          jdkArchitectureOption: "x64"
          publishJUnitResults: false
          tasks: "jlink"
      - task: ArchiveFiles@2
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        inputs:
          rootFolderOrFile: "$(System.DefaultWorkingDirectory)/build/kb.application/image"
          includeRootFolder: true
          archiveType: "tar"
          tarCompression: "xz"
          archiveFile: "$(System.DefaultWorkingDirectory)/ubuntu-$(Build.BuildNumber).tar.xz"
      - task: PublishPipelineArtifact@1
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        inputs:
          path: "$(System.DefaultWorkingDirectory)/ubuntu-$(Build.BuildNumber).tar.xz"
          artifact: "ubuntu"
  - job: macOS
    pool:
      vmImage: "macOS-latest"
    steps:
      - task: Gradle@2
        displayName: "Gradle Assemble"
        inputs:
          workingDirectory: ""
          gradleWrapperFile: "gradlew"
          javaHomeOption: "JDKVersion"
          jdkVersionOption: "1.11"
          jdkArchitectureOption: "x64"
          publishJUnitResults: false
          testResultsFiles: "**/TEST-*.xml"
          tasks: "assemble"
      - task: Gradle@2
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        displayName: "Generate Runtime Image"
        inputs:
          workingDirectory: ""
          gradleWrapperFile: "gradlew"
          javaHomeOption: "JDKVersion"
          jdkVersionOption: "1.11"
          jdkArchitectureOption: "x64"
          publishJUnitResults: false
          tasks: "jlink"
      - task: ArchiveFiles@2
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        inputs:
          rootFolderOrFile: "$(System.DefaultWorkingDirectory)/build/kb.application/image"
          includeRootFolder: true
          archiveType: "tar"
          tarCompression: "xz"
          archiveFile: "$(System.DefaultWorkingDirectory)/macOS-$(Build.BuildNumber).tar.xz"
      - task: PublishPipelineArtifact@1
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        inputs:
          path: "$(System.DefaultWorkingDirectory)/macOS-$(Build.BuildNumber).tar.xz"
          artifact: "macOS"